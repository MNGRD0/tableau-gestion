<?php

namespace App\Http\Controllers;
use Illuminate\Http\Request;
use App\Models\Client;
use Illuminate\Support\Facades\Hash;
// On importe "Hash" pour vÃ©rifier que le mot de passe entrÃ© correspond Ã  celui stockÃ© (cryptÃ©).

class ClientConnexionController extends Controller
{
    //Afficher le formulaire de connexion client :
    public function formulaire()
    {
        return view('clients.connexion');
        // Laravel affiche la vue "clients/connexion.blade.php" (Connexion du client)
    }

    //Traite la connexion du client :
    public function connecter(Request $request)
    // Cette mÃ©thode traite le formulaire envoyÃ© par le client (email + mot de passe).
    {
        // ğŸ”’ VÃ©rifie que les champs sont bien remplis (validation sÃ©curisÃ©e)
        $request->validate([
            'email_client' => 'required|email',              // l'email doit Ãªtre prÃ©sent et au bon format
            // "required" = requis (champ obligatoire)
            // "email" = doit Ãªtre un format email valide (ex : test@mail.com)

            'mot_de_passe_client' => 'required',             // le mot de passe doit Ãªtre prÃ©sent
            // "required" = requis, le mot de passe ne peut pas Ãªtre vide
        ]);
        // "validate()" = vÃ©rifie que les champs respectent les rÃ¨gles. Si ce nâ€™est pas le cas, Laravel revient Ã  la page prÃ©cÃ©dente avec des erreurs automatiques.
        // Cela protÃ¨ge des mauvaises donnÃ©es ou tentatives de piratage.

        // On cherche un client dans la base avec l'email donnÃ©
        $client = Client::where('email_client', $request->email_client)->first();

        if (!$client || $client->deleted_at) {
            // Si aucun client nâ€™est trouvÃ© OU si le client a Ã©tÃ© supprimÃ© (soft delete), on affiche une erreur :
            return back()->withErrors([
                'email_client' => 'Ce compte nâ€™existe pas ou a Ã©tÃ© supprimÃ©.',
            ]);
            // "back()" = revenir Ã  la page prÃ©cÃ©dente
            // "withErrors()" = afficher des messages dâ€™erreurs personnalisÃ©s
        }

        // Si un client est trouvÃ©, on vÃ©rifie que le mot de passe est correct
        if ($client && Hash::check($request->mot_de_passe_client, $client->mot_de_passe_client)) {
            // "Hash::check(...)" compare le mot de passe tapÃ© avec celui stockÃ© en base (chiffrÃ©).
            // Si câ€™est bon, on connecte le client :

            session(['client_id' => $client->id]);
            // On enregistre lâ€™identifiant du client dans la session â†’ le client est maintenant reconnu comme connectÃ©.
            // "session()" = accÃ¨de Ã  lâ€™espace temporaire de donnÃ©es du client (le garde connectÃ©)

            return redirect()->route('client.espace');
            // On redirige le client vers son espace personnel (vue oÃ¹ il voit ses donnÃ©es).
        }

        // Si le mot de passe est incorrect ou aucun client trouvÃ©, on renvoie une erreur
        return back()->withErrors([
            'email_client' => 'Identifiants incorrects.',
        ]);
    }

    // Deconnexion du client :
    public function deconnexion()
    {
        session()->invalidate();
        // "invalidate" = invalider complÃ¨tement la session
        // Cela supprime toutes les donnÃ©es temporaires du client connectÃ© (plus propre et plus sÃ©curisÃ©)

        session()->regenerateToken();
        // "regenerateToken" = regÃ©nÃ©rer un nouveau jeton CSRF (protection contre les fausses requÃªtes de formulaire)
        // CSRF = Cross Site Request Forgery (attaque possible sur les formulaires)

        return redirect()->route('accueil')->with('message', 'Vous Ãªtes bien dÃ©connectÃ©.');
        // On le redirige vers la page dâ€™accueil du site
    }
}
