<?php

namespace App\Http\Controllers;
use Illuminate\Http\Request;
use App\Models\Admin;

class AuthAdminController extends Controller

{
    // Afficher la page de connexion :
    public function formulaire()
    {
        return view('admin.connexion');
        // On charge la vue "admin/connexion.blade.php", l√† o√π l‚Äôadmin entre son nom et mot de passe.
    }

    // Traiter le formulaire de connexion :
    public function connexion(Request $request)
    // Cette fonction s‚Äôex√©cute quand l‚Äôadmin soumet le formulaire de connexion.
    // "$request" contient les donn√©es envoy√©es (comme le nom et le mot de passe).
    {
        // üîí √âtape 0 : Validation des champs du formulaire :
        $request->validate([
            'nom_admin' => 'required|string',
            // "required" = requis (le champ ne doit pas √™tre vide)
            // "string" = doit √™tre une cha√Æne de caract√®res (texte)

            'mot_de_passe' => 'required|string',
            // "mot_de_passe" est aussi requis et doit √™tre une cha√Æne de texte
        ]);
        // "validate()" = fonction Laravel qui v√©rifie les r√®gles indiqu√©es ci-dessus.
        // Si une r√®gle √©choue (ex : champ vide), Laravel redirige automatiquement vers la page pr√©c√©dente avec un message d‚Äôerreur.
        // On s√©curise ainsi le formulaire c√¥t√© serveur, pour √©viter les bugs ou les mauvaises donn√©es.

        // 1. R√©cuperer les infos du formulaire :
        $nom = $request->input('nom_admin');
        $mot_de_passe = $request->input('mot_de_passe');
        // On r√©cup√®re les champs du formulaire : "nom_admin" : le nom tap√© par l‚Äôadmin et "mot_de_passe" : le mot de passe tap√©

        // 2. Chercher un admin avec ce nom :
        $admin = Admin::where('nom_admin', $nom)->first();
        // On cherche dans la base de donn√©es un admin dont le nom correspond.
        // "first()" prend le premier r√©sultat trouv√© (ou null si aucun).
        // "where()" = "o√π", c‚Äôest une m√©thode Laravel pour filtrer une colonne (ici : "nom_admin")

        // 3. Si l'admin existe et le mot de passe est correct :
        if ($admin && password_verify($mot_de_passe, $admin->mot_de_passe)) {
            // "password_verify" permet de comparer le mot de passe tap√© avec celui enregistr√© (crypt√©).
            // "verify" = "v√©rifier"
            // Si c‚Äôest bon, on consid√®re que l‚Äôadmin est bien connect√©.

            // 4. On sauvegarde l'admin en session :
            session(['admin_connecte' => $admin->id]);
            // On enregistre dans la session que cet admin est connect√©, avec son identifiant.
            // Cela permet de le reconna√Ætre sur les autres pages.

            // 5. Redirige vers la page clients :
            return redirect()->route('clients.index');
            // On redirige vers la page principale de gestion (ex. liste des clients).
        }

        // Sinon : renvoyer un message d'erreur :
        return redirect()->route('connexion')->with('erreur', 'Identifiants incorrects.');
        // Si l‚Äôadmin n‚Äôexiste pas ou que le mot de passe est faux :
        // On le renvoie vers la page de connexion avec un message d‚Äôerreur temporaire.
    }

    public function deconnexion()
    {
        session()->invalidate();
        // "invalidate" = invalider, rendre invalide
        // Cette m√©thode vide compl√®tement la session, √ßa supprime toutes les infos stock√©es temporairement (y compris 'admin_connecte')
        // Cela permet d‚Äô√©viter que quelqu‚Äôun r√©cup√®re des donn√©es apr√®s la d√©connexion.

        session()->regenerateToken();
        // "regenerateToken" = reg√©n√©rer le jeton de s√©curit√© (appel√© "CSRF token" dans Laravel)
        // CSRF = Cross Site Request Forgery (attaque qui envoie des faux formulaires √† ta place)
        // Ce token est utilis√© dans tous les formulaires avec @csrf, donc on en cr√©e un nouveau pour repartir propre.

        return redirect()->route('accueil')->with('message', 'Vous √™tes bien d√©connect√©.');
        // "redirect()" = redirige vers une autre page.
        // "->route('accueil')" = on redirige vers la route nomm√©e "accueil"
        // "->with('message', '...')" = on envoie un message flash temporaire √† la prochaine page, pour dire que la d√©connexion a r√©ussi.
    }
}
